<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IDM直装注册版（完美，不反弹！）</title>
    <url>/2024/07/26/IDM%E7%9B%B4%E8%A3%85%E6%B3%A8%E5%86%8C%E7%89%88%EF%BC%88%E5%AE%8C%E7%BE%8E%EF%BC%8C%E4%B8%8D%E5%8F%8D%E5%BC%B9%EF%BC%81%EF%BC%89/</url>
    <content><![CDATA[<p><strong>Internet Download Manager v6.38.15.2</strong></p>
<p><strong>中文绿色特别版：【<a href="https://www.mediafire.com/file/lk9opo8bhcak3to/Inet.Download.Manager.v6.38.15.2.rar/file">点击下载</a>】</strong></p>
<p><strong>一定要安装IDM的浏览器插件，才可以自动调用下载！</strong></p>
<p><strong>浏览器插件：</strong>【<a href="https://chrome.google.com/webstore/detail/idm-integration-module/ngpampappnmepgilojfohadhhmbhlaek/related">进入安装</a>】</p>
<p>再华丽的语言也无法表达IDM的牛C！</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>效率工具</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>md语法速查</title>
    <url>/2024/07/23/md%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><blockquote>
<p>语法：# (一级标题)  ## (二级标题)  ### (三级标题) ……</p>
</blockquote>
<blockquote>
<p>代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;# 这是一级标题</span><br><span class="line">&gt;## 这是二级标题</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:  </p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2></blockquote>
<blockquote>
<p>快捷键:</p>
<ul>
<li>Ctrl+数字1~6可以快速将选中的文本调成对应级别的标题</li>
<li>Ctrl+0可以快速将选中的文本调成普通文本</li>
<li>Ctrl+加号&#x2F;减号对标题级别进行加减</li>
</ul>
</blockquote>
<h2 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h2><h3 id="1、换行"><a href="#1、换行" class="headerlink" title="1、换行"></a>1、换行</h3><blockquote>
<p>代码:  </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;这是一个段落</span><br><span class="line">&gt;这是一个段落</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果: </p>
<p>这是一个段落<br>这是一个段落</p>
</blockquote>
<h3 id="2、分割线"><a href="#2、分割线" class="headerlink" title="2、分割线"></a>2、分割线</h3><blockquote>
<p>语法:  —或者***+回车</p>
</blockquote>
<blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;---或者***</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:</p>
<hr>
</blockquote>
<h2 id="三、文字显示"><a href="#三、文字显示" class="headerlink" title="三、文字显示"></a>三、文字显示</h2><h3 id="1、字体"><a href="#1、字体" class="headerlink" title="1、字体"></a>1、字体</h3><blockquote>
<p>语法:</p>
<ul>
<li>粗体:  用一对双星号包裹</li>
<li>删除线:  用一对双飘号包裹</li>
<li>下划线:  用一对u标签包裹</li>
<li>斜体:  用一对单星号包裹</li>
<li>高亮:  用一对双等号包裹</li>
</ul>
</blockquote>
<blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;**这是粗体**</span><br><span class="line">&gt;~~这是删除线~~</span><br><span class="line">&gt;&lt;u&gt;这是下划线&lt;/u&gt;</span><br><span class="line">&gt;*这是斜体*</span><br><span class="line">&gt;==这是高亮==</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:<br><strong>这是粗体</strong><br><del>这是删除线</del><br><u>这是下划线</u><br><em>这是斜体</em><br>&#x3D;&#x3D;这是高亮&#x3D;&#x3D;</p>
</blockquote>
<blockquote>
<p>快捷键:</p>
<ul>
<li>加粗:  Ctrl+B</li>
<li>删除线:  Shift+Alt+5</li>
<li>下划线:  Ctrl+U</li>
<li>斜体:  Ctrl+I</li>
</ul>
</blockquote>
<h3 id="2、上下标"><a href="#2、上下标" class="headerlink" title="2、上下标"></a>2、上下标</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;x^2^</span><br><span class="line">&gt;H~2~O</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:<br>x^2^<br>H<del>2</del>O</p>
</blockquote>
<h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><h3 id="1、无序列表"><a href="#1、无序列表" class="headerlink" title="1、无序列表"></a>1、无序列表</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;*/-/+ +空格</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:<br>1.只有同一级别:</p>
<ul>
<li>苹果</li>
<li>香蕉</li>
<li>橘子</li>
</ul>
<p>2.子集类:</p>
<ul>
<li>一级分类<ul>
<li>二级分类 <ul>
<li>三级分类</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>快捷键:  Ctrl+Shift+]</p>
</blockquote>
<h3 id="2、有序列表"><a href="#2、有序列表" class="headerlink" title="2、有序列表"></a>2、有序列表</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;数字+.+空格</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:</p>
<ol>
<li>第一个标题</li>
<li>第二个标题</li>
<li>第三个标题</li>
</ol>
<ul>
<li>子内容1</li>
<li>子内容2</li>
</ul>
<ol start="4">
<li>第四个标题</li>
</ol>
</blockquote>
<blockquote>
<p>快捷键:  Ctrl+Shift+[</p>
</blockquote>
<h3 id="3、任务列表"><a href="#3、任务列表" class="headerlink" title="3、任务列表"></a>3、任务列表</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;- [ ] 吃早餐</span><br><span class="line">&gt;- [x] 背单词</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:</p>
<ul>
<li><input disabled="" type="checkbox"> 吃早餐</li>
<li><input checked="" disabled="" type="checkbox"> 背单词</li>
</ul>
</blockquote>
<h2 id="五、区块显示"><a href="#五、区块显示" class="headerlink" title="五、区块显示"></a>五、区块显示</h2><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;&gt;+回车</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:</p>
<blockquote>
<p>这是最外层区块</p>
<blockquote>
<p>这是内层区块</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是最内层区块</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="六、代码显示"><a href="#六、代码显示" class="headerlink" title="六、代码显示"></a>六、代码显示</h2><h3 id="1、行内代码"><a href="#1、行内代码" class="headerlink" title="1、行内代码"></a>1、行内代码</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;`int a=0;`（说明：`位于Esc下面）</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:<br><code>int a=0;</code></p>
</blockquote>
<blockquote>
<p>快捷键:  Ctrl+Shift+&#96;</p>
</blockquote>
<h3 id="2、代码块"><a href="#2、代码块" class="headerlink" title="2、代码块"></a>2、代码块</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;```js/java/c#/text</span><br><span class="line">&gt;内容</span><br><span class="line">&gt;```</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>快捷键:  Ctrl+Shift+K</p>
</blockquote>
<h2 id="七、链接"><a href="#七、链接" class="headerlink" title="七、链接"></a>七、链接</h2><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;www.baidu.com</span><br><span class="line">&gt;[百度一下](https://www.baidu.com)</span><br><span class="line">&gt;[百度一下](https://www.baidu.com &quot;https://www.baidu.com&quot;)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:<br><a href="http://www.baidu.com/">www.baidu.com</a><br><a href="https://www.baidu.com/">百度一下</a><br><a href="https://www.baidu.com/" title="https://www.baidu.com">百度一下</a></p>
</blockquote>
<blockquote>
<p>快捷键:  Ctrl+K</p>
</blockquote>
<h2 id="八、脚注"><a href="#八、脚注" class="headerlink" title="八、脚注"></a>八、脚注</h2><blockquote>
<p>说明:  对文本进行解释说明。</p>
</blockquote>
<blockquote>
<p>代码: </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;[^文本]</span><br><span class="line">&gt;[^文本]:解释说明</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:<br>这是一个技术<a href="%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E6%A1%86%E6%9E%B6%E3%80%82">^①</a></p>
</blockquote>
<h2 id="九、图片插入"><a href="#九、图片插入" class="headerlink" title="九、图片插入"></a>九、图片插入</h2><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;![不显示的文字](图片路径 &quot;图片标题&quot;)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>快捷键:  Ctrl+Shift+I</p>
</blockquote>
<h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;|  1   |  2   |  3   |</span><br><span class="line">&gt;| :--- | :--: | ---: |</span><br><span class="line">&gt;|  4   |  5   |  6   |</span><br><span class="line">&gt;|  7   |  8   |  9   |</span><br><span class="line">&gt;|  10  |  11  |  12  |</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:</p>
<table>
<thead>
<tr>
<th>1</th>
<th align="center">2</th>
<th align="right">3</th>
</tr>
</thead>
<tbody><tr>
<td>4</td>
<td align="center">5</td>
<td align="right">6</td>
</tr>
<tr>
<td>7</td>
<td align="center">8</td>
<td align="right">9</td>
</tr>
<tr>
<td>10</td>
<td align="center">11</td>
<td align="right">12</td>
</tr>
</tbody></table>
</blockquote>
<blockquote>
<p>快捷键:  Ctrl+T</p>
</blockquote>
<h2 id="十一、支持的HTML元素"><a href="#十一、支持的HTML元素" class="headerlink" title="十一、支持的HTML元素"></a>十一、支持的HTML元素</h2><h3 id="1、文本居中"><a href="#1、文本居中" class="headerlink" title="1、文本居中"></a>1、文本居中</h3><blockquote>
<p>代码</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;&lt;center&gt;内容&lt;/center&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果</p>
<center>内容</center>
</blockquote>
<h3 id="2、快捷键显示"><a href="#2、快捷键显示" class="headerlink" title="2、快捷键显示"></a>2、快捷键显示</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;&lt;kbd&gt;内容&lt;/kbd&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:<br><kbd>内容</kbd></p>
</blockquote>
<h3 id="3、加粗"><a href="#3、加粗" class="headerlink" title="3、加粗"></a>3、加粗</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;&lt;b&gt;加粗&lt;/b&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:</p>
<p><b>加粗</b></p>
</blockquote>
<h3 id="4、倾斜"><a href="#4、倾斜" class="headerlink" title="4、倾斜"></a>4、倾斜</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;&lt;i&gt;倾斜&lt;/i&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:<br><i>倾斜</i></p>
</blockquote>
<h3 id="5、上下标"><a href="#5、上下标" class="headerlink" title="5、上下标"></a>5、上下标</h3><blockquote>
<p>代码:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;开始&lt;sup&gt;123hi你好&lt;/sup&gt;</span><br><span class="line">&gt;开始&lt;sub&gt;321hi你好&lt;/sub&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果:<br>开始<sup>123hi你好</sup><br>开始<sub>321hi你好</sub></p>
</blockquote>
<h3 id="6、填充的黑色箭头"><a href="#6、填充的黑色箭头" class="headerlink" title="6、填充的黑色箭头"></a>6、填充的黑色箭头</h3><blockquote>
<p>代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&amp;#x27A4;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>效果：<br>&#x27A4;</p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>效率工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的使用</title>
    <url>/2024/07/24/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Git-与-GitHub"><a href="#Git-与-GitHub" class="headerlink" title="Git 与 GitHub"></a>Git 与 GitHub</h1><h2 id="Git-的起源"><a href="#Git-的起源" class="headerlink" title="Git 的起源"></a>Git 的起源</h2><h4 id="“自由主义-开源-教皇”-林纳斯·托瓦兹"><a href="#“自由主义-开源-教皇”-林纳斯·托瓦兹" class="headerlink" title="“自由主义( 开源 ) 教皇” 林纳斯·托瓦兹"></a>“自由主义( 开源 ) 教皇” 林纳斯·托瓦兹</h4><ul>
<li>Linux</li>
<li>Git</li>
</ul>
<h4 id="Git-是什么？"><a href="#Git-是什么？" class="headerlink" title="Git 是什么？"></a>Git 是什么？</h4><ul>
<li>Git 是目前世界上最先进的<font color='red'>分布式</font>版本控制工具( 没有之一 )</li>
</ul>
<h2 id="Git-的使用"><a href="#Git-的使用" class="headerlink" title="Git 的使用"></a>Git 的使用</h2><h4 id="Git-的安装"><a href="#Git-的安装" class="headerlink" title="Git 的安装"></a>Git 的安装</h4><ul>
<li><p>Windows git 下载地址 :</p>
<ol>
<li><a href="https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></li>
<li>下载 -&gt; 默认选项安装</li>
<li>桌面右键 点击 <code>Git Bash Here</code>  即可看到一个终端窗口</li>
<li>在终端内输入 git –version 如果看到版本信息即安装成功</li>
</ol>
</li>
<li><p>安装完成后，需要最后一步设置，在终端内输入(<font color='red'><strong>不要复制 英文输入法下手打</strong></font>)</p>
<ol>
<li><p><font color ='blue'><strong>git config –global user.name</strong></font>“<font color = 'red'><strong>Your Name</strong></font>“</p>
</li>
<li><p><font color= 'blue'><strong>git config –global user.email</strong></font>“<font color = 'red'><strong><a href="mailto:&#x65;&#x6d;&#x61;&#x69;&#x6c;&#64;&#x78;&#120;&#120;&#46;&#99;&#x6f;&#109;">&#x65;&#x6d;&#x61;&#x69;&#x6c;&#64;&#x78;&#120;&#120;&#46;&#99;&#x6f;&#109;</a></strong></font>“</p>
<p> <strong>备注：</strong>以上二步的姓名和邮箱可以随意更改，建议使用自己的</p>
</li>
<li><p><font color='blue'><strong>git config user.name</strong></font> 用于查看配置的姓名</p>
</li>
<li><p><font color='blue'><strong>git config user.email</strong></font> 用于查看配置的邮箱</p>
</li>
<li><p>因为 Git 是分布式版本控制系统，所以每个机器必须配置：用户名和email地址</p>
</li>
</ol>
</li>
</ul>
<h4 id="常用-Linux命令-部分"><a href="#常用-Linux命令-部分" class="headerlink" title="常用 Linux命令( 部分 )"></a>常用 Linux命令( 部分 )</h4><ul>
<li>mkdir xxx 新建文件夹</li>
<li>vi x.txt 新建&#x2F;编辑一个名为 x 的 txt 文件<ul>
<li>输入 i 进入编辑模式</li>
<li>Esc + : +wq    保存并退出</li>
<li>Esc + : + q!     不保存退出</li>
</ul>
</li>
<li>cd xxx 进入一个名为 xxx 的文件夹</li>
<li>cd .. 返回上一级目录</li>
<li>ls 列出当前文件夹所有的文件</li>
<li>pwd 显示当前目录</li>
<li>cat x.txt 显示 名为 x 的 txt 文件的内容</li>
<li>clear 清屏( 需要注意 : cmd 控制台中 cls 为清屏  )</li>
</ul>
<h4 id="工作区-版本区-暂存区"><a href="#工作区-版本区-暂存区" class="headerlink" title="工作区+版本区+暂存区"></a>工作区+版本区+暂存区</h4><ul>
<li>工作区 ( working Directory ) : 简单的理解 —— 你在电脑中能看到的目录</li>
<li>暂存区 ( stage ) : 介于 工作区 和 版本区 中间，是工作区到版本区的必经之路</li>
<li>版本库 ( Repository ) : 工作区有一个隐藏目录 .git ,这个文件夹不算工作区，而是 Git 的版本库<ul>
<li>第一步 : git add   把文件添加进暂存区</li>
<li>第二步 : git commit  把暂存区的所有内容提交到当前版本库</li>
</ul>
</li>
</ul>
<h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><ul>
<li><p><font color='pink' ><strong>git init</strong> </font>命令 : 初始化版本库</p>
<ul>
<li>创建成功会提示 : <font color='yellowgreen'><strong>Initialized empty Git repository in C:&#x2F;Users&#x2F;31195&#x2F;Desktop&#x2F;xxx&#x2F;.git&#x2F;</strong></font></li>
<li>目录上会多一个 .git 的文件夹( 没有显示的请打开 显示隐藏文件 )，这个文件夹是 Git 来跟踪管理版本库的，不要去修改&#x2F;删除里面的内容</li>
</ul>
</li>
<li><p><font color = 'pink'><strong>git add x.xx</strong></font> 命令 : 添加指定文件到暂存区</p>
<ul>
<li>没有任何提示，代表提交成功( Linux的设计理念 )</li>
<li>若未初始化，则会提示: <font color='red'><strong>fatal: not a git repository (or any of the parent directories): .git</strong></font></li>
<li>失败则会提示 : <font color='red'><strong>fatal: pathspec ‘x.xx’ did not match any files</strong></font></li>
<li>可能出现：<font color='red'><strong>warning: LF will be replaced by CRLF in xxxx</strong></font><ul>
<li>原因 : Linux和Windows的换行符不一致导致</li>
<li>解决方法 :执行 <font color='blue'><strong>git config –global core.autocrlf false</strong></font></li>
</ul>
</li>
</ul>
</li>
<li><p>怎么查看文件有没有添加成功</p>
<ul>
<li><font color='blue'><strong>git status</strong></font><ul>
<li>显示<font color='red'> 红色 </font>则未提交到暂存区</li>
<li>显示<font color='green'> 绿色 </font>则已经提交到暂存区</li>
</ul>
</li>
</ul>
</li>
<li><p><font color='pink'><strong>git commit -m ‘对本次提交的描述’</strong></font></p>
<ul>
<li><p>显示则代表 已经成功提交到版本库中</p>
</li>
<li><p>如果只输入<font color='red'><strong>git commit</strong></font>会出问题，这时需要 ESC + : + q! 退出即可</p>
</li>
</ul>
</li>
</ul>
<h4 id="差异对比"><a href="#差异对比" class="headerlink" title="差异对比"></a>差异对比</h4><ul>
<li><p><font color='pink'><strong>git diff</strong></font> : 比较暂存区和工作区</p>
</li>
<li><p><font color='pink'><strong>git diff –cached</strong></font> : 比较版本库与暂存区 </p>
</li>
<li><p><font color='pink'><strong>git diff master</strong></font> : 比较版本库和工作区</p>
</li>
</ul>
<h4 id="日志-版本号"><a href="#日志-版本号" class="headerlink" title="日志 + 版本号"></a>日志 + 版本号</h4><ul>
<li><p><font color='pink'><strong>git log</strong></font> : 显示从最近到最远的所有提交日志</p>
</li>
<li><p><font color='pink'><strong>git reflog</strong></font> : 显示每次提交 ( commit ) 的 commit id</p>
</li>
</ul>
<h4 id="版本回退-版本穿梭-版本撤销"><a href="#版本回退-版本穿梭-版本撤销" class="headerlink" title="版本回退 + 版本穿梭 + 版本撤销"></a>版本回退 + 版本穿梭 + 版本撤销</h4><ul>
<li><p><font color='pink'><strong>git reset –hard HEAD^</strong></font> 	版本回退( 回退一次提交 )</p>
</li>
<li><p><font color='pink'><strong>git reset –hard 版本号</strong></font>	回退到指定<font color='red'>版本号</font>的 commit id 版本</p>
</li>
<li><p><font color='pink'><strong>git reset HEAD</strong></font> 	用<code>版本库</code>中的文件去替换<code>暂存区</code>的全部文件</p>
</li>
<li><p><font color='pink'><strong>git checkout –x.xxx</strong></font>	用<code>暂存区的指定文件</code>去替换<code>工作区的指定文件</code>		<font color ='red'><strong>危险</strong></font></p>
</li>
<li><p><font color='pink'><strong>git checkout HEAD x.xxx</strong></font>	用<code>版本库中的文件</code>替换<code>暂存区</code>和<code>工作区</code>的文件		<font color ='red'><strong>危险</strong></font></p>
</li>
<li><p><font color='pink'><strong>git rm –cached x.xxx</strong></font>	从<code>暂存区</code>删除文件</p>
</li>
</ul>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><ul>
<li><font color ='pink'><strong>git rm x.xxx</strong></font> 删除文件</li>
<li><font color ='pink'><strong>git rm -r xxxx</strong></font> 删除文件夹</li>
<li><strong>常见问题</strong></li>
</ul>
<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><ul>
<li><font color='pink'><strong>git checkout -b dev</strong></font> 		创建 dev 分支，并切换到 dev 分支</li>
<li><font color='pink'><strong>git branch</strong></font> 		查看当前分支</li>
<li><font color='pink'><strong>git checkout master</strong></font>		切换到主分支</li>
<li><font color='pink'><strong>git merge dev</strong></font>		合并 dev 分支到当前分支</li>
<li><font color='pink'><strong>git branch -d dev</strong></font>		删除指定分支</li>
<li><font color='pink'><strong>git diff 分支1 分支2</strong></font>		显示出两个分支之间所有差异文件的详细差异</li>
<li><font color='pink'><strong>git diff 分支1 分支2 –stat</strong></font>		显示出两个分支之间所有差异文件列表</li>
<li><font color='pink'><strong>git diff 分支1 分支2 x.xxx</strong></font>		显示指定文件的详细差异</li>
</ul>
<h4 id="版本冲突"><a href="#版本冲突" class="headerlink" title="版本冲突"></a>版本冲突</h4><ul>
<li>合并分支时，如果在<font color ='red'>同一个文件的同一个地方，都修改了或新增内容</font>会引起版本冲突</li>
<li>解决版本冲突最好的办法是借助 Webstorm ( 或 VS Code ) 解决，简单且高效</li>
</ul>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h4 id="GitHub-是什么？"><a href="#GitHub-是什么？" class="headerlink" title="GitHub 是什么？"></a>GitHub 是什么？</h4><ul>
<li>GitHub 是一个 Git 项目托管网站</li>
</ul>
<h4 id="GitHub-能做什么？"><a href="#GitHub-能做什么？" class="headerlink" title="GitHub 能做什么？"></a>GitHub 能做什么？</h4><ul>
<li><p>能够分享你的代码或其他开发人员配合一起开发</p>
</li>
<li><p>GitHub 是一个基于 Git 的代码托管平台，Git 并不像 SVN 那样有一个中心服务器。目前我们使用到的 Git 命令都是在本地执行，需要将数据放到一台其他开发人员能够连接的服务器上</p>
</li>
</ul>
<h4 id="GitHub-远程仓库的使用"><a href="#GitHub-远程仓库的使用" class="headerlink" title="GitHub 远程仓库的使用"></a>GitHub 远程仓库的使用</h4><h6 id="关联-本地有仓库，要和远程仓库做关联"><a href="#关联-本地有仓库，要和远程仓库做关联" class="headerlink" title="关联 : 本地有仓库，要和远程仓库做关联"></a>关联 : 本地有仓库，要和远程仓库做关联</h6><ul>
<li><font color ='pink'><strong>git init</strong></font>	</li>
<li><font color ='pink'>**git add ***</font></li>
<li><font color ='pink'><strong>git commit -m ‘this is NO.1 commit’</strong></font></li>
<li><font color ='pink'><strong>在 GitHub 上创建一个远程仓库</strong></font></li>
<li><font color ='purple'><strong>git remote add origin https:&#x2F;&#x2F;&lt;token令牌&gt;@github.com&#x2F;&lt;GitHub用户名&gt;&#x2F;&lt;仓库名&gt;</strong></font></li>
</ul>
<h6 id="推送-本地有仓库有内容，要推送给远程库"><a href="#推送-本地有仓库有内容，要推送给远程库" class="headerlink" title="推送 : 本地有仓库有内容，要推送给远程库"></a>推送 : 本地有仓库有内容，要推送给远程库</h6><ul>
<li><font color ='pink'><strong>git push -u origin master</strong></font></li>
<li>第一次推送的时候 需要加上 -u 参数，Git 不但会把本地的 master 分支内容推送到远程新的 master 分支，还会把本地 master 分支和远程的 master 分支关联起来，在以后推送时可以简化命令 <font color='pink'><strong>git push origin master</strong></font></li>
<li><strong>备注</strong> :  正常情况下，成功推送一次后，电脑会记住相关信息。下次推送时不会再提示输入。若电脑不能自动记住相关信息，需要执行命令 : <font color='blue'><strong>git config –global credential.helper store</strong></font></li>
</ul>
<h6 id="拉取-本地仓库有内容，获取远程库的新内容"><a href="#拉取-本地仓库有内容，获取远程库的新内容" class="headerlink" title="拉取 : 本地仓库有内容，获取远程库的新内容"></a>拉取 : 本地仓库有内容，获取远程库的新内容</h6><ul>
<li><font color='pink'><strong>git pull origin master</strong></font>		将远程仓库的 master 分支上的代码版本复制&#x2F;合并到本地 master 分支上</li>
<li><font color='pink'><strong>git fetch origin master:tmp</strong></font>		新建一个tmp分支，将远程仓库的 master 分支上代码版本复制到本地 tmp 分支上，不会自动合并</li>
</ul>
<h6 id="克隆-本地无仓库，要获取一个完整的远程库"><a href="#克隆-本地无仓库，要获取一个完整的远程库" class="headerlink" title="克隆 : 本地无仓库，要获取一个完整的远程库"></a>克隆 : 本地无仓库，要获取一个完整的远程库</h6><ul>
<li><p><font color ='pink'><strong>git clone 远程仓库地址</strong></font></p>
</li>
<li><p><strong>备注：</strong>只在第一次获取远程库时，才需要克隆</p>
</li>
</ul>
<h1 id="Git-常用命令总结"><a href="#Git-常用命令总结" class="headerlink" title="Git 常用命令总结"></a>Git 常用命令总结</h1><ul>
<li><p><strong>mkdir XXX		创建一个空目录  XXX指目录名</strong>		</p>
</li>
<li><p><strong>pwd		显示当前目录的路径</strong></p>
</li>
<li><p><strong>cat xxx		查看xxx文件内容</strong></p>
</li>
<li><p><font color='red'><strong>git init		把当前的目录变成可以管理的 git 仓库，生成隐藏的.git 文件夹</strong></font></p>
</li>
<li><p><font color='red'><strong>git add xxx		把xxx文件添加到暂存区</strong></font></p>
</li>
<li><p><font color='red'><strong>git commit -m ‘xxx’		提交文件 -m后面是注释 必须写</strong></font></p>
</li>
<li><p><strong>git status		查看仓库状态</strong></p>
</li>
<li><p><strong>git log		查看提交历史记录</strong></p>
</li>
<li><p><strong>git reset –hard HEAD^		往上回退一个版本</strong></p>
</li>
<li><p><strong>git reflog		查看提交历史记录的版本号id</strong></p>
</li>
<li><p><strong>git checkout –xxx		把xxx文件在工作区的修改全部撤销</strong></p>
</li>
<li><p><strong>git rm xxx		删除xxx文件</strong></p>
</li>
<li><p><font color='red'><strong>git remote add origin https:&#x2F;&#x2F;&lt;token令牌&gt;@github.com&#x2F;&lt;GitHub用户名&gt;&#x2F;&lt;仓库名&gt; 		关联一个远程库</strong></font></p>
</li>
<li><p><font color='red'><strong>git push -u ( 第一次加上 -u ，以后不用 ) origin master		把当前master分支推送到远程库</strong></font></p>
</li>
<li><p><font color='red'><strong>git clone 远程仓库地址		从远程库克隆</strong></font></p>
</li>
<li><p><font color='red'><strong>git checkout -b dev		创建dev分支，并切换到dev分支</strong></font></p>
</li>
<li><p><font color='red'><strong>git branch		查看当前所有的分支</strong></font></p>
</li>
<li><p><font color='red'><strong>git checkout master		切换回master分支</strong></font></p>
</li>
<li><p><font color='red'><strong>git merge dev		在当前分支合并dev分支</strong></font></p>
</li>
<li><p><strong>git branch -d dev		删除dev分支</strong></p>
</li>
<li><p><font color='red'><strong>git branch xxx		创建分支xxx</strong></font></p>
</li>
<li><p><strong>git remote		查看远程库信息</strong></p>
</li>
<li><p><strong>git remote -v		查看远程库的详细信息</strong></p>
</li>
<li><p><font color='red'><strong>git pull origin master		将远程库的更新拉取到本地并自动合并</strong></font></p>
</li>
</ul>
<h1 id="提交代码的规范"><a href="#提交代码的规范" class="headerlink" title="提交代码的规范"></a>提交代码的规范</h1><ul>
<li><strong>每次提交之前：先更新，再提交</strong></li>
<li><strong>敏感时间点，一定要及时更新文件</strong></li>
<li><strong>多提交，避免 “只关注写代码，不关注提交” 的现象</strong></li>
<li><strong>每次提交必须写清晰明了的提交说明</strong></li>
<li><strong>不要提交不能通过编译的代码</strong></li>
<li><strong>不要提交自己不明白的代码</strong></li>
<li><strong>慎用锁定功能( 尽量避免使用锁，不轻易解锁已上锁的文件 )</strong></li>
<li><strong>不要提交本地自动生成的文件、文件夹</strong></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas数据结构</title>
    <url>/2024/07/23/pandas%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>构造 DataFrame 和 Series 的方法有多种。以下是一些常见的方法：</p>
<h3 id="构造-DataFrame："><a href="#构造-DataFrame：" class="headerlink" title="构造 DataFrame："></a>构造 DataFrame：</h3><ol>
<li><strong>从字典构造</strong>：使用字典创建 DataFrame，字典的键是列名，值是列的数据。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;B&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>从列表构造</strong>：使用列表构造 DataFrame，每个子列表代表一行数据。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [[<span class="number">1</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">6</span>]]</span><br><span class="line">df = pd.DataFrame(data, columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>从 NumPy 数组构造</strong>：使用 NumPy 数组构造 DataFrame。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.array([[<span class="number">1</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">6</span>]])</span><br><span class="line">df = pd.DataFrame(data, columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>从 Series 构造</strong>：使用 Series 构造 DataFrame。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">s2 = pd.Series([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: s1, <span class="string">&#x27;B&#x27;</span>: s2&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="构造-Series："><a href="#构造-Series：" class="headerlink" title="构造 Series："></a>构造 Series：</h3><ol>
<li><strong>从列表构造</strong>：使用列表构造 Series。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>从 NumPy 数组构造</strong>：使用 NumPy 数组构造 Series。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">s = pd.Series(arr)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>从字典构造</strong>：使用字典构造 Series，字典的键作为索引。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line">s = pd.Series(data)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>从标量值构造</strong>：使用标量值构造 Series，指定索引长度。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = pd.Series(<span class="number">5</span>, index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>这些是构造 DataFrame 和 Series 最常见的方法，根据数据的来源和形式选择合适的构造方式。</p>
<hr>
<p>在 Pandas 中，<code>iloc</code>、<code>loc</code>、<code>at</code> 和 <code>iat</code> 是用于访问数据的四种方法，它们之间的区别和使用方法如下：</p>
<ol>
<li><code>iloc</code>：通过整数位置来访问数据。你可以使用行号和列号来获取数据。行和列的编号都是从 0 开始的。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个示例 DataFrame</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;B&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过整数位置访问数据</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># 输出第 0 行、第 1 列的元素，这里输出的是 4</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>loc</code>：通过标签来访问数据。你可以使用行标签和列标签来获取数据。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 loc 访问数据</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>])  <span class="comment"># 输出第 0 行、&#x27;B&#x27; 列的元素，这里输出的是 4</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>at</code>：通过标签快速访问标量值。类似于 <code>loc</code>，但 <code>at</code> 只能用于获取单个元素，速度更快。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 at 访问单个元素</span></span><br><span class="line"><span class="built_in">print</span>(df.at[<span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>])  <span class="comment"># 输出第 0 行、&#x27;B&#x27; 列的元素，这里输出的是 4</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>iat</code>：通过整数位置快速访问标量值。类似于 <code>iloc</code>，但 <code>iat</code> 只能用于获取单个元素，速度更快。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 iat 访问单个元素</span></span><br><span class="line"><span class="built_in">print</span>(df.iat[<span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># 输出第 0 行、第 1 列的元素，这里输出的是 4</span></span><br></pre></td></tr></table></figure>

<p>总结一下：</p>
<ul>
<li>当你知道你要访问的数据的位置时，使用 <code>iloc</code> 和 <code>iat</code>，它们更快。其中iat获取单个元素</li>
<li>当你知道你要访问的数据的标签时，使用 <code>loc</code> 和 <code>at</code>，它们更直观。其中at获取单个元素</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>三数之和:排序+双指针</title>
    <url>/2024/07/24/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%9A%E6%8E%92%E5%BA%8F+%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p>
<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>3 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>排序 + 双指针</strong><br>本题的难点在于如何去除重复解。</p>
<p><strong>算法流程</strong>：<br>特判，对于数组长度 n，如果数组为 null 或者数组长度小于 3，返回 []。<br>对数组进行排序。<br><strong>遍历排序后数组</strong>：<br>若 nums[i]&gt;0：因为已经排序好，所以后面不可能有三个数加和等于 0，直接返回结果。<br>对于重复元素：跳过，避免出现重复解<br>令左指针 L&#x3D;i+1，右指针 R&#x3D;n−1，当 L&lt;R 时，执行循环：<br>当 nums[i]+nums[L]+nums[R]&#x3D;&#x3D;0，执行循环，判断左界和右界是否和下一位置重复，去除重复解。并同时将 L,R 移到下一位置，寻找新的解<br>若和大于 0，说明 nums[R] 太大，R 左移<br>若和小于 0，说明 nums[L] 太小，L 右移<br>复杂度分析<br>时间复杂度：O(n<sup>2</sup>)，数组排序 O(NlogN)，遍历数组 O(n)，双指针遍历 O(n)，总体 O(NlogN)+O(n)∗O(n)，O(n<sup>2</sup>)<br>空间复杂度：O(1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    n=<span class="built_in">len</span>(nums)</span><br><span class="line">    res=[]</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> nums <span class="keyword">or</span> n&lt;<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    nums.sort()</span><br><span class="line">    res=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span> <span class="keyword">and</span> nums[i]==nums[i-<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        L=i+<span class="number">1</span></span><br><span class="line">        R=n-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(L&lt;R):</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[L]+nums[R]==<span class="number">0</span>):</span><br><span class="line">                res.append([nums[i],nums[L],nums[R]])</span><br><span class="line">                <span class="keyword">while</span>(L&lt;R <span class="keyword">and</span> nums[L]==nums[L+<span class="number">1</span>]):</span><br><span class="line">                    L=L+<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span>(L&lt;R <span class="keyword">and</span> nums[R]==nums[R-<span class="number">1</span>]):</span><br><span class="line">                    R=R-<span class="number">1</span></span><br><span class="line">                L=L+<span class="number">1</span></span><br><span class="line">                R=R-<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span>(nums[i]+nums[L]+nums[R]&gt;<span class="number">0</span>):</span><br><span class="line">                R=R-<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                L=L+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>主流大语言模型评测与选择</title>
    <url>/2024/07/24/%E4%B8%BB%E6%B5%81%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AF%84%E6%B5%8B%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<h1 id="主流大语言模型评测与选择"><a href="#主流大语言模型评测与选择" class="headerlink" title="主流大语言模型评测与选择"></a>主流大语言模型评测与选择</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>近年来，人工智能技术迅猛发展，大语言模型作为其中的重要组成部分，在各个领域展示了其强大的能力和广泛的应用前景。本文将详细评测目前市面上的几款主流大语言模型，包括OpenAI的ChatGPT，Google的Gemini，Anthropic的Claude，百度的文心一言，月之暗面的Kimi，字节跳动的豆包，以及科大讯飞的讯飞星火。我们将从模型性能、应用场景、用户体验、创新性及可扩展性等方面进行深入分析，以帮助用户在选择合适的大语言模型时提供参考。</p>
<h2 id="模型简介"><a href="#模型简介" class="headerlink" title="模型简介"></a>模型简介</h2><h3 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a><a href="https://chatgpt.com/">ChatGPT</a></h3><p>ChatGPT是OpenAI推出的一款强大大语言模型，凭借其出色的自然语言处理能力和多样化的应用场景，迅速成为业界翘楚。ChatGPT能够流畅地理解和生成人类语言，并在对话系统、内容生成、编程辅助等方面表现优异。</p>
<h3 id="Google-Gemini"><a href="#Google-Gemini" class="headerlink" title="Google Gemini"></a><a href="https://gemini.google.com/">Google Gemini</a></h3><p>Google Gemini是Google开发的一款新型大语言模型，融合了Google在自然语言处理和机器学习领域的前沿技术。Gemini的独特之处在于其强大的多任务处理能力和高度定制化的应用方案，适用于从信息检索到创意生成的广泛领域。</p>
<h3 id="Claude"><a href="#Claude" class="headerlink" title="Claude"></a><a href="https://claude.ai/">Claude</a></h3><p>Claude是Anthropic推出的大语言模型，以其在安全性和伦理方面的创新性设计著称。Claude旨在在保持强大生成能力的同时，最大限度地减少有害输出，其在内容生成和对话系统中的表现非常出色。</p>
<h3 id="文心一言"><a href="#文心一言" class="headerlink" title="文心一言"></a><a href="https://yiyan.baidu.com/">文心一言</a></h3><p>文心一言是百度推出的一款大语言模型，专注于中文语境下的自然语言处理和生成。文心一言在中文理解和生成方面具有很高的精度，广泛应用于中文对话系统、自动翻译和内容生成等领域。</p>
<h3 id="Kimi"><a href="#Kimi" class="headerlink" title="Kimi"></a><a href="https://kimi.moonshot.cn/">Kimi</a></h3><p>Kimi是由年轻的公司月之暗面推出的一款新兴大语言模型。虽然市场知名度较低，但其在特定领域如技术文档生成和代码辅助编写方面表现不俗。Kimi致力于提供高效、精准的技术解决方案。</p>
<h3 id="豆包"><a href="#豆包" class="headerlink" title="豆包"></a><a href="https://www.doubao.com/">豆包</a></h3><p>豆包是字节跳动推出的大语言模型，专注于内容生成和创意写作。豆包利用字节跳动在内容平台上的数据优势，在生成自然且富有创意的文本方面表现出色。</p>
<h3 id="讯飞星火"><a href="#讯飞星火" class="headerlink" title="讯飞星火"></a><a href="https://xinghuo.xfyun.cn/">讯飞星火</a></h3><p>讯飞星火是科大讯飞推出的智能语言模型，特别擅长语音识别和自然语言理解。讯飞星火在智能助手、教育和客服系统中有着广泛应用。</p>
<h2 id="模型性能对比"><a href="#模型性能对比" class="headerlink" title="模型性能对比"></a>模型性能对比</h2><h3 id="1-语言理解能力"><a href="#1-语言理解能力" class="headerlink" title="1. 语言理解能力"></a>1. 语言理解能力</h3><p>在语言理解能力方面，ChatGPT和Google Gemini表现尤为突出。ChatGPT在多语言环境中的表现非常稳定，能够处理复杂的语法结构和上下文信息。Google Gemini则凭借其强大的数据支持和算法优化，在处理自然语言任务时展现出卓越的性能。</p>
<p>文心一言在中文语言处理方面具有明显优势，特别是在处理汉语特有的语法和词汇时，表现出色。豆包在生成富有创意的文本方面表现优异，但在复杂的语言理解任务中稍显不足。Claude以其对安全性和伦理问题的重视，确保了在生成内容时尽量减少不良信息的输出。讯飞星火则在语音识别和自然语言理解方面具有独特优势，特别适合语音交互场景。</p>
<h3 id="2-生成能力"><a href="#2-生成能力" class="headerlink" title="2. 生成能力"></a>2. 生成能力</h3><p>在文本生成能力方面，ChatGPT和豆包表现最佳。ChatGPT生成的文本流畅自然，适用于多种应用场景。豆包凭借其在内容平台上的数据积累，能够生成极具创意和吸引力的内容。Google Gemini和Claude在生成任务中也表现不俗，能够根据输入生成高质量的文本。</p>
<p>文心一言在生成中文文本方面具有优势，特别是在处理中文对话和自动翻译任务时，表现优异。Kimi在技术文档生成方面表现突出，适合用于代码辅助编写和技术文档生成。讯飞星火则在语音到文本的转换中表现出色，适用于语音助手和客服系统。</p>
<h3 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h3><p>不同的大语言模型在应用场景上各有所长。ChatGPT适用于对话系统、内容生成、编程辅助等多种场景。Google Gemini凭借其多任务处理能力，适用于信息检索、创意生成等广泛领域。Claude在内容生成和对话系统中表现出色，同时其在安全性和伦理方面的设计，使其适用于需要严格内容审核的场景。</p>
<p>文心一言专注于中文语言处理，适用于中文对话系统、自动翻译和内容生成等领域。Kimi在技术文档生成和代码辅助编写方面表现突出。豆包在内容生成和创意写作方面具有优势，适用于需要生成自然且富有创意文本的场景。讯飞星火在语音识别和自然语言理解方面具有独特优势，适用于语音助手、教育和客服系统。</p>
<h2 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h2><p>在用户体验方面，ChatGPT和Google Gemini表现最佳。ChatGPT以其高效的响应速度和自然的对话体验，获得了广泛好评。Google Gemini则凭借其强大的多任务处理能力和高度定制化的应用方案，提供了极佳的用户体验。</p>
<p>文心一言在中文语言处理方面具有优势，能够提供精准的中文对话和文本生成体验。Claude以其对安全性和伦理问题的重视，确保用户在使用过程中获得安全可靠的体验。豆包在生成创意文本方面表现出色，特别适合需要高质量内容生成的用户。讯飞星火在语音识别和自然语言理解方面表现优异，为用户提供了便捷的语音交互体验。</p>
<h2 id="创新性及可扩展性"><a href="#创新性及可扩展性" class="headerlink" title="创新性及可扩展性"></a>创新性及可扩展性</h2><p>在创新性和可扩展性方面，ChatGPT和Google Gemini同样表现出色。ChatGPT不断更新和优化其模型，推出了多个版本，持续提升其性能和应用范围。Google Gemini则利用其在机器学习和自然语言处理领域的前沿技术，推出了高度定制化和多任务处理能力的解决方案。</p>
<p>Claude在安全性和伦理方面的创新设计，使其在生成内容时能够最大限度地减少有害输出。文心一言在中文语言处理方面的创新性，使其在中文语境下具有很高的应用价值。Kimi虽然市场知名度较低，但其在技术文档生成和代码辅助编写方面的独特功能，使其在特定领域具有优势。豆包利用字节跳动在内容平台上的数据优势，在内容生成和创意写作方面具有独特的创新性。讯飞星火在语音识别和自然语言理解方面的技术创新，使其在语音交互场景中具有广泛的应用前景。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>综上所述，不同的大语言模型在各自的应用场景中具有不同的优势。<strong>ChatGPT</strong>和<strong>Google Gemini</strong>在多任务处理和用户体验方面表现出色，适用于广泛的应用场景。<strong>Claude</strong>在安全性和伦理方面的设计，使其适用于需要严格内容审核的场景。<strong>文心一言</strong>在中文语言处理方面具有明显优势，特别适合中文对话系统和自动翻译等任务。<strong>Kimi</strong>在技术文档生成和代码辅助编写方面表现突出。<strong>豆包</strong>在内容生成和创意写作方面具有优势。<strong>讯飞星火</strong>在语音识别和自然语言理解方面表现优异，适用于语音交互场景。</p>
<p>在选择合适的大语言模型时，用户应根据具体的应用需求和场景，综合考虑各个模型的性能、用户体验和创新性等因素，选择最符合自身需求的模型。希望本文的评测能够为用户在选择大语言模型时提供有价值的参考。</p>
]]></content>
      <categories>
        <category>科技</category>
      </categories>
      <tags>
        <tag>效率工具</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库表设计</title>
    <url>/2024/07/23/%E5%AE%BF%E8%88%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p align="right">
  <span style="color:#0077cc; font-weight:bold;">作者: 戴暄哲</span><br>
  日期: 2024年6月
</p>


<h3 id="表：d-admin"><a href="#表：d-admin" class="headerlink" title="表：d_admin"></a>表：<code>d_admin</code></h3><table>
<thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>a_id</code></td>
<td>int</td>
<td>管理员ID</td>
</tr>
<tr>
<td><code>a_username</code></td>
<td>varchar(20)</td>
<td>用户名</td>
</tr>
<tr>
<td><code>a_password</code></td>
<td>varchar(50)</td>
<td>密码</td>
</tr>
<tr>
<td><code>a_name</code></td>
<td>varchar(20)</td>
<td>姓名</td>
</tr>
<tr>
<td><code>a_phone</code></td>
<td>bigint</td>
<td>电话号码</td>
</tr>
<tr>
<td><code>a_power</code></td>
<td>varchar(20)</td>
<td>权限</td>
</tr>
<tr>
<td><code>a_describe</code></td>
<td>varchar(40)</td>
<td>描述</td>
</tr>
</tbody></table>
<h3 id="表：d-class"><a href="#表：d-class" class="headerlink" title="表：d_class"></a>表：<code>d_class</code></h3><table>
<thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>c_id</code></td>
<td>int</td>
<td>班级ID</td>
</tr>
<tr>
<td><code>c_classid</code></td>
<td>int</td>
<td>班级编号</td>
</tr>
<tr>
<td><code>c_classname</code></td>
<td>varchar(30)</td>
<td>班级名称</td>
</tr>
<tr>
<td><code>c_counsellor</code></td>
<td>varchar(30)</td>
<td>辅导员</td>
</tr>
</tbody></table>
<h3 id="表：d-dormgrade"><a href="#表：d-dormgrade" class="headerlink" title="表：d_dormgrade"></a>表：<code>d_dormgrade</code></h3><table>
<thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>g_id</code></td>
<td>int</td>
<td>宿舍评分ID</td>
</tr>
<tr>
<td><code>d_id</code></td>
<td>int</td>
<td>宿舍ID</td>
</tr>
<tr>
<td><code>d_dormbuilding</code></td>
<td>varchar(20)</td>
<td>宿舍楼名称</td>
</tr>
<tr>
<td><code>d_grade</code></td>
<td>int</td>
<td>评分</td>
</tr>
<tr>
<td><code>create_time</code></td>
<td>datetime</td>
<td>创建时间</td>
</tr>
<tr>
<td><code>update_time</code></td>
<td>datetime</td>
<td>更新时间</td>
</tr>
</tbody></table>
<h3 id="表：d-dormitoryinfo"><a href="#表：d-dormitoryinfo" class="headerlink" title="表：d_dormitoryinfo"></a>表：<code>d_dormitoryinfo</code></h3><table>
<thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>d_id</code></td>
<td>int</td>
<td>宿舍信息ID</td>
</tr>
<tr>
<td><code>s_dormitoryid</code></td>
<td>int</td>
<td>宿舍编号</td>
</tr>
<tr>
<td><code>d_dormbuilding</code></td>
<td>varchar(20)</td>
<td>宿舍楼名称</td>
</tr>
<tr>
<td><code>d_bedtotal</code></td>
<td>varchar(20)</td>
<td>总床位数</td>
</tr>
<tr>
<td><code>d_bed</code></td>
<td>varchar(20)</td>
<td>可用床位数</td>
</tr>
<tr>
<td><code>a_name</code></td>
<td>varchar(20)</td>
<td>宿舍管理员姓名</td>
</tr>
</tbody></table>
<h3 id="表：d-dormrepair"><a href="#表：d-dormrepair" class="headerlink" title="表：d_dormrepair"></a>表：<code>d_dormrepair</code></h3><table>
<thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>r_id</code></td>
<td>int</td>
<td>维修ID</td>
</tr>
<tr>
<td><code>d_id</code></td>
<td>int</td>
<td>宿舍ID</td>
</tr>
<tr>
<td><code>d_dormbuilding</code></td>
<td>varchar(30)</td>
<td>宿舍楼名称</td>
</tr>
<tr>
<td><code>r_name</code></td>
<td>varchar(20)</td>
<td>报修人姓名</td>
</tr>
<tr>
<td><code>reason</code></td>
<td>varchar(50)</td>
<td>报修原因</td>
</tr>
<tr>
<td><code>create_time</code></td>
<td>datetime</td>
<td>创建时间</td>
</tr>
<tr>
<td><code>update_time</code></td>
<td>datetime</td>
<td>更新时间</td>
</tr>
</tbody></table>
<h3 id="表：d-stgrade"><a href="#表：d-stgrade" class="headerlink" title="表：d_stgrade"></a>表：<code>d_stgrade</code></h3><table>
<thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>g_id</code></td>
<td>int</td>
<td>学生成绩ID</td>
</tr>
<tr>
<td><code>s_studentid</code></td>
<td>int</td>
<td>学生编号</td>
</tr>
<tr>
<td><code>s_name</code></td>
<td>varchar(20)</td>
<td>学生姓名</td>
</tr>
<tr>
<td><code>s_grade</code></td>
<td>int</td>
<td>评分</td>
</tr>
<tr>
<td><code>s_classid</code></td>
<td>int</td>
<td>班级编号</td>
</tr>
<tr>
<td><code>s_dormitoryid</code></td>
<td>int</td>
<td>宿舍编号</td>
</tr>
<tr>
<td><code>create_time</code></td>
<td>datetime</td>
<td>创建时间</td>
</tr>
<tr>
<td><code>update_time</code></td>
<td>datetime</td>
<td>更新时间</td>
</tr>
</tbody></table>
<h3 id="表：d-student"><a href="#表：d-student" class="headerlink" title="表：d_student"></a>表：<code>d_student</code></h3><table>
<thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>s_id</code></td>
<td>int</td>
<td>学生ID</td>
</tr>
<tr>
<td><code>s_studentid</code></td>
<td>int</td>
<td>学生编号</td>
</tr>
<tr>
<td><code>s_name</code></td>
<td>varchar(20)</td>
<td>学生姓名</td>
</tr>
<tr>
<td><code>s_sex</code></td>
<td>varchar(20)</td>
<td>性别</td>
</tr>
<tr>
<td><code>s_age</code></td>
<td>int</td>
<td>年龄</td>
</tr>
<tr>
<td><code>s_phone</code></td>
<td>bigint</td>
<td>电话号码</td>
</tr>
<tr>
<td><code>s_classid</code></td>
<td>int</td>
<td>班级编号</td>
</tr>
<tr>
<td><code>s_classname</code></td>
<td>varchar(20)</td>
<td>班级名称</td>
</tr>
<tr>
<td><code>s_dormitoryid</code></td>
<td>int</td>
<td>宿舍编号</td>
</tr>
</tbody></table>
<h3 id="表：d-visitor"><a href="#表：d-visitor" class="headerlink" title="表：d_visitor"></a>表：<code>d_visitor</code></h3><table>
<thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>v_id</code></td>
<td>int</td>
<td>访客ID</td>
</tr>
<tr>
<td><code>v_name</code></td>
<td>varchar(20)</td>
<td>访客姓名</td>
</tr>
<tr>
<td><code>v_phone</code></td>
<td>bigint</td>
<td>访客电话号码</td>
</tr>
<tr>
<td><code>v_dormitoryid</code></td>
<td>int</td>
<td>访问宿舍编号</td>
</tr>
<tr>
<td><code>v_dormbuilding</code></td>
<td>varchar(20)</td>
<td>访问宿舍楼名称</td>
</tr>
<tr>
<td><code>create_time</code></td>
<td>datetime</td>
<td>创建时间</td>
</tr>
</tbody></table>
<p>这些表之间通过特定字段进行关联，以下是它们之间的关系说明：</p>
<ol>
<li><p><strong>d_admin</strong> 表：</p>
<ul>
<li>没有直接的外键与其他表关联，通常通过 <code>a_id</code> 与其他表关联管理员信息。</li>
</ul>
</li>
<li><p><strong>d_class</strong> 表：</p>
<ul>
<li>没有直接的外键与其他表关联，通过 <code>c_classid</code> 与其他表关联班级信息。</li>
</ul>
</li>
<li><p><strong>d_dormgrade</strong> 表：</p>
<ul>
<li><code>d_id</code> 字段与 <strong>d_dormitoryinfo</strong> 表中的 <code>d_id</code> 字段关联，表示宿舍评分与宿舍信息的关系。</li>
</ul>
</li>
<li><p><strong>d_dormitoryinfo</strong> 表：</p>
<ul>
<li><code>s_dormitoryid</code> 字段与 <strong>d_stgrade</strong> 和 <strong>d_visitor</strong> 表中的 <code>s_dormitoryid</code> 字段关联，表示宿舍信息与学生和访客的关系。</li>
</ul>
</li>
<li><p><strong>d_dormrepair</strong> 表：</p>
<ul>
<li><code>d_id</code> 字段与 <strong>d_dormitoryinfo</strong> 表中的 <code>d_id</code> 字段关联，表示宿舍维修信息与宿舍信息的关系。</li>
</ul>
</li>
<li><p><strong>d_stgrade</strong> 表：</p>
<ul>
<li><code>s_studentid</code> 字段与 <strong>d_student</strong> 表中的 <code>s_studentid</code> 字段关联，表示学生成绩与学生信息的关系。</li>
<li><code>s_dormitoryid</code> 字段与 <strong>d_dormitoryinfo</strong> 表中的 <code>s_dormitoryid</code> 字段关联，表示学生成绩与宿舍信息的关系。</li>
</ul>
</li>
<li><p><strong>d_student</strong> 表：</p>
<ul>
<li><code>s_classid</code> 字段与 <strong>d_class</strong> 表中的 <code>c_id</code> 字段关联，表示学生与班级信息的关系。</li>
<li><code>s_dormitoryid</code> 字段与 <strong>d_dormitoryinfo</strong> 表中的 <code>s_dormitoryid</code> 字段关联，表示学生与宿舍信息的关系。</li>
</ul>
</li>
<li><p><strong>d_visitor</strong> 表：</p>
<ul>
<li><code>v_dormitoryid</code> 字段与 <strong>d_dormitoryinfo</strong> 表中的 <code>s_dormitoryid</code> 字段关联，表示访客与宿舍信息的关系。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>作品</category>
      </categories>
      <tags>
        <tag>设计</tag>
        <tag>数据库</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索引擎搜索技巧</title>
    <url>/2024/07/23/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<ol>
<li>限定关键词：<code>&quot;搜索内容&quot;</code> <strong>保证关键词是连续出现</strong></li>
<li>限定标题：<code>intitle:标题内容</code></li>
<li>限定多个关键词：<code>allintitle:标题内容1 标题内容2</code></li>
<li>限定内容关键词：<code>intext:内容关键词</code></li>
<li>限定网址：<code>inurl:包含的url</code> 如包含cctv</li>
<li>限定网址搜索来源：<code>site:具体的网址</code></li>
<li>限定文件格式：<code>文件内容 filetype:文件格式</code> 如 毕业论文 filetype:pdf</li>
</ol>
]]></content>
      <categories>
        <category>方法</category>
      </categories>
      <tags>
        <tag>效率工具</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>拜登退选：哈里斯接任，2024年总统大选的新格局</title>
    <url>/2024/07/23/%E6%8B%9C%E7%99%BB%E9%80%80%E9%80%89%EF%BC%9A%E5%93%88%E9%87%8C%E6%96%AF%E6%8E%A5%E4%BB%BB%EF%BC%8C2024%E5%B9%B4%E6%80%BB%E7%BB%9F%E5%A4%A7%E9%80%89%E7%9A%84%E6%96%B0%E6%A0%BC%E5%B1%80/</url>
    <content><![CDATA[<img src="https://www.pnglog.com/FDPPbA.jpg" style="zoom: 33%;"/>

<p>​	</p>
<p>​	当地时间7月21日下午，美国总统拜登宣布，他不再谋求连任，并全力支持副总统哈里斯作为民主党总统候选人，参与2024年总统角逐。22日，哈里斯发表声明称，已获得足够支持成为民主党总统候选人。</p>
<p>​	拜登“主动请辞”，让民主党总算松了口气。然而，临阵换帅怎么说也是兵家大忌。相比拜登，副总统哈里斯尽管有年龄、性别及少数族裔等诸多“优势”加持，但想在未来短短几个月内扭转颓势，给民主党带来好运，恐怕是“不可能完成的任务”。</p>
<p><strong>临危受命，哈里斯手里有几张牌？</strong></p>
<p>​	被推上风口浪尖的副总统哈里斯，在拜登宣布支持提名她作为党内总统候选人的第一时间，表达了对拜登的感谢之情，希望自己能够“赢得党内总统候选人的提名”，尽一切努力击败共和党总统候选人特朗普。</p>
<p>​	临危受命的哈里斯，手里到底握有几张牌？</p>
<p>​	首先，哈里斯的年龄优势。1964年出生的哈里斯，比拜登整整年轻了22岁，比特朗普年轻19岁，享有巨大的年龄优势。在拜登的年龄、健康状况和认知能力饱受质疑、成为特朗普竞选团队重要攻击把柄的情况下，选择年轻的哈里斯无疑是对特朗普竞选策略的釜底抽薪，让对手无法再将火力集中于民主党总统候选人的年龄和健康状况上。一个朝气蓬勃、充满活力的哈里斯将为民主党沉闷的竞选活动注入新鲜血液，相比之下，特朗普的年龄反而成了劣势和诟病对象。</p>
<p>​	其次，哈里斯的女性身份。民调显示，特朗普在女性选民中的支持率一直低迷，远低于拜登在女性中的支持率。特朗普私生活的不检点和在堕胎问题上的首鼠两端立场，让很多女性选民对他望而却步。然而，拜登由于年龄、健康问题以及在堕胎问题上的不坚定立场，也无法激起女性选民、特别是年轻女性选民的热情。哈里斯在堕胎问题上“支持选择权”（支持女性有堕胎权利和自由）的坚定立场和对女性权利的坚强捍卫，无疑在情感上与女性、特别是年轻女性更能产生共鸣。特别是在面对特朗普时，哈里斯的女性身份和女权立场，更能赢得女性选民支持。</p>
<p>​	再次，哈里斯的少数族裔身份。哈里斯的父母分别来自印度和牙买加，拥有亚裔和非裔双重少数族裔身份。这两大少数族裔身份的加持，相对于特朗普，哈里斯更能获得非裔和亚裔少数族裔的共情与共鸣。特朗普在对哈里斯进行“攻击”时，更可能投鼠忌器，担心一不小心被扣上种族主义的帽子。在拉美裔、非裔等少数族裔对拜登日益不满的节骨眼，作为少数族裔的哈里斯“出征”，或许能扭转不利于民主党的选情变化，逐步赢得少数族裔支持。</p>
<p>​	最后，哈里斯担任检察官的经历。在进入华盛顿政坛以前，哈里斯长期在加州政治圈耕耘，先后在县检察官办公室和旧金山地方检察官办公室工作，并历任旧金山地区检察官和加州总检察长。长期担任检察官的经历，让哈里斯熟稔法律，思维敏捷，长于辩论，并善于抓住对手漏洞穷追猛打。哈里斯担任参议员期间，曾在司法部长塞申斯和联邦最高法院大法官卡瓦纳任命听证会上对其进行刨根问底式的“灵魂拷问”，给观众留下深刻印象。哈里斯的这些经历及雄辩口才，与拜登辩论时的卡壳、口吃和不知所云，将形成强烈反差，特朗普将遇到一个强劲的辩论对手。特别是，特朗普被定罪与哈里斯作为“检察官”的履历，如果进行辩论，很容易让人浮现起检察官“审判”犯人的画面。</p>
<img src="https://www.pnglog.com/tOtZ5c.png" />



<p><strong>哈里斯锁定党内提名已无悬念</strong></p>
<p>​	哈里斯虽然得到拜登的全力支持，但是到目前为止，民主党内大佬、前总统奥巴马还没有明确表态。奥巴马在拜登退选后的一份声明中表示：“在接下来的几天里，我们将在未知的水域前行。但我非常有信心，我们党的领导人将能组织一个产生一位杰出候选人的过程。”显然，奥巴马对哈里斯并不满意。</p>
<p>​	不过，好消息是，自拜登周日宣布退选后，民主党已经迅速集结在哈里斯周围，哈里斯也已获得了拜登的竞选资金，准备全力迎战特朗普。特别是没有在第一时间表态的民主党重量级人物——前议长佩洛西、参议院民主党领袖舒默和众议院民主党领袖杰弗里斯，已经在当地时间周一表态支持哈里斯。此外，所有民主党州长都已经表态支持哈里斯，密歇根州长惠特曼还自告奋勇担任哈里斯竞选团队的共同主席。</p>
<p>​	鉴于民主党全国代表大会召开在即，留给民主党的时间已经不多了。特别是，俄亥俄州最早9月份就开始大选投票。根据该州法律，两党必须在8月7日前提交总统候选人名单。因此，民主党几乎没有时间就总统候选人进行内部详细讨论和公开角逐。果然，当地时间7月22日，哈里斯发表声明称已获得足够支持成为民主党总统候选人。</p>
<img src="https://www.pnglog.com/vQyfIJ.png" style="zoom: 67%;" />



<p><strong>哈里斯能否挽回民主党颓势？</strong></p>
<p>​	哈里斯锁定党内总统候选人提名几无悬念，但是能否扭转民主党选举颓势，将是一个巨大的问号。实际上，从目前情况看，这似乎是一个无法完成的任务。</p>
<p>​	首先，临阵换帅是兵家大忌。在距民主党全国代表大会召开不到一个月，距大选投票不足4个月之际，通过“逼宫”方式，迫使现任总统和党内总统候选人退选，无异于一场不流血的“政变”。这至少说明：第一，民主党对赢得此次大选几乎失去了信心，否则也不会铤而走险，出此下策。第二，民主党担心的不仅仅是失去白宫，更担心可能失去国会参议院多数席位及两院的控制权。</p>
<p>​	逼退现任总统候选人，还会留下诸多“后遗症”。一是影响民主党内部团结。拜登在宣布退选的前一天还坚持不会退选，退选时声称是出于党派利益和国家利益退选，并对奥巴马等“幕后主使”心怀怨愤。奥巴马在拜登退选后特意没有选择公开支持哈里斯，以及佩洛西、舒默等人姗姗来迟的支持，都凸显民主党内部在这一问题上的分歧与矛盾。二是留给哈里斯的时间不多。哈里斯尽管位居副总统，但普遍认为她不在拜登的决策核心圈。哈里斯仓促上位，在短时间内团结本党、凝聚共识，组建竞选团队，提出竞选纲领，迎战特朗普，扭转民主党颓势，可谓时间紧、任务重，困难重重。</p>
<p>​	其次，哈里斯是“矮子里面拔将军”。哈里斯近四年的副总统履历，并没有成为她的政治加分项，相反可能是负资产。哈里斯担任副总统期间，几乎没有拿得出手、哪怕是一项让美国民众能够印象深刻的政绩。相反，在美国民众的记忆里，满是哈里斯在公开场合不合时宜的“傻笑”、面对边境非法移民激增时的手足无措以及副总统办公室内“宫斗”的丑闻。就像特朗普在竞选集会上嘲讽的，近四年时间里，拜登只让哈里斯专注一件事，即应对边境非法移民问题，但她却完全搞砸了，非法移民长驱直入，让美国边境形同虚设。拿着这张成绩单的哈里斯，能否成为特朗普的“克星”和民主党的“救星”，让人捏把汗。</p>
<p>​	最后，特朗普风头正健。至少自去年底以来，无论是全国性民调，还是在6-7个关键摇摆州的民调，特朗普都稳定领先拜登。特别是今年4月以来美国大学校园抗议运动、6月27日拜登与特朗普的首场大选电视辩论以及7月13日特朗普在竞选中的遇刺事件，更是进一步拖累了拜登的人气，让民主党忧心如焚。特朗普遇刺后的诸多民调显示，人们对特朗普的正面印象有了较大幅度提升。据美国广播公司新闻和益普索的民调，在未遂暗杀和共和党全国代表大会之后，特朗普的支持率稳步上升，达到40%，创下了该机构四年来民意调查的最高支持率，而大多数美国人则希望总统拜登退出竞选。很多美国政治评论家甚至认为，特朗普在竞选中遇袭，已经将特朗普变成了一种政治符号，完成了对他选举的“加冕仪式”。尽管有些夸张，但特朗普遇袭及遇袭后特朗普在特勤人员簇拥下高举拳头、高呼“战斗”的“定型照”，无疑是今年大选最具冲击力的画面。</p>
<p>​	哈里斯要挽回民主党选情颓势，可能难于上青天。但是，这并不意味着哈里斯就无计可施。如果哈里斯将矛头对准特朗普的人品、集中于特朗普的道德瑕疵，聚焦特朗普对美国选举制度和法治的践踏与不尊重，强调特朗普代表了富人和大公司的利益，把大选再次变成对特朗普的“公投”，或许还能给特朗普竞选造成一定干扰，给民主党赢得一些喘息空间。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>时政</tag>
      </tags>
  </entry>
  <entry>
    <title>数电密码锁设计</title>
    <url>/2024/07/23/%E6%95%B0%E7%94%B5%E5%AF%86%E7%A0%81%E9%94%81%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p align="right">
  <span style="color:#0077cc; font-weight:bold;">作者: 戴暄哲</span><br>
  日期: 2024年6月
</p>

<h3 id="一、设计目标"><a href="#一、设计目标" class="headerlink" title="一、设计目标"></a>一、设计目标</h3><p>设计一个密码锁系统，包含以下功能：</p>
<ol>
<li><strong>初始化密码</strong> - 使用74LS138设置初始化密码。</li>
<li><strong>用户输入密码</strong> - 使用74LS151选择用户输入的密码。</li>
<li><strong>密码比较和输出控制</strong> - 使用74LS04反相器进行密码比较和控制灯的亮与暗。</li>
</ol>
<h3 id="二、选用芯片"><a href="#二、选用芯片" class="headerlink" title="二、选用芯片"></a>二、选用芯片</h3><ul>
<li><strong>74LS138</strong>（3选8译码器，用于初始化密码） - 16针脚</li>
<li><strong>74LS151</strong>（8选1数据选择器，用于用户输入密码） - 16针脚</li>
<li><strong>74LS04</strong>（反相器，用于信号反转） - 14针脚</li>
</ul>
<h3 id="三、系统架构"><a href="#三、系统架构" class="headerlink" title="三、系统架构"></a>三、系统架构</h3><ol>
<li><strong>初始化密码部分</strong>：使用74LS138设置初始化密码，并将输出连接到74LS151的输入。</li>
<li><strong>用户输入部分</strong>：使用74LS151选择用户输入的密码。</li>
<li><strong>密码比较和输出控制部分</strong>：使用74LS04进行密码比较，控制灯的亮与暗。</li>
</ol>
<h3 id="四、逻辑设计"><a href="#四、逻辑设计" class="headerlink" title="四、逻辑设计"></a>四、逻辑设计</h3><h4 id="1-初始化密码部分"><a href="#1-初始化密码部分" class="headerlink" title="1. 初始化密码部分"></a>1. 初始化密码部分</h4><ul>
<li><p>使用74LS138设置初始化密码，将A2、A1、A0分别设置为1、0、1（即101）。</p>
</li>
<li><p>将74LS138的输出连接到74LS151的输入。</p>
</li>
<li><blockquote>
<img src="https://www.pnglog.com/EVNbvK.png"  style="zoom: 25%;" />

<img src="https://www.pnglog.com/DxcC9R.png"  style="zoom:25%;" /></blockquote>
</li>
</ul>
<h4 id="2-用户输入部分"><a href="#2-用户输入部分" class="headerlink" title="2. 用户输入部分"></a>2. 用户输入部分</h4><ul>
<li>用户输入的密码通过74LS151的A、B、C地址输入端选择。</li>
</ul>
<h4 id="3-密码比较和输出控制部分"><a href="#3-密码比较和输出控制部分" class="headerlink" title="3. 密码比较和输出控制部分"></a>3. 密码比较和输出控制部分</h4><ul>
<li><p>74LS151的输出Y经过74LS04反相器后连接到灯L上。</p>
</li>
<li><blockquote>
<img src="https://www.pnglog.com/u8de2J.png"  style="zoom: 50%;" /></blockquote>
</li>
</ul>
<h3 id="五、连线示例"><a href="#五、连线示例" class="headerlink" title="五、连线示例"></a>五、连线示例</h3><h4 id="1-74LS138连接（初始化密码）"><a href="#1-74LS138连接（初始化密码）" class="headerlink" title="1. 74LS138连接（初始化密码）"></a>1. 74LS138连接（初始化密码）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">74LS138:</span><br><span class="line">A2: 用户输入的第1位（接1）</span><br><span class="line">A1: 用户输入的第2位（接0）</span><br><span class="line">A0: 用户输入的第3位（接1）</span><br><span class="line">Y0-Y7: 输出（依次输出到74LS151的数据端）</span><br></pre></td></tr></table></figure>

<h4 id="2-74LS151连接（用户输入密码）"><a href="#2-74LS151连接（用户输入密码）" class="headerlink" title="2. 74LS151连接（用户输入密码）"></a>2. 74LS151连接（用户输入密码）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">74LS151:</span><br><span class="line">D0-D7: 预设的8位密码（将11011111连接到D0-D7）</span><br><span class="line">A, B, C: 用户输入的3位密码</span><br><span class="line">Y: 选择的存储密码输出（连接到74LS04的输入）</span><br></pre></td></tr></table></figure>

<h4 id="3-74LS04连接（反相器）"><a href="#3-74LS04连接（反相器）" class="headerlink" title="3. 74LS04连接（反相器）"></a>3. 74LS04连接（反相器）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">74LS04:</span><br><span class="line">A: 74LS151的输出Y</span><br><span class="line">Y: 反相信号输出（连接到灯L）</span><br></pre></td></tr></table></figure>

<h3 id="六、验证和测试"><a href="#六、验证和测试" class="headerlink" title="六、验证和测试"></a>六、验证和测试</h3><ol>
<li>连接好所有电路后，进行通电测试。</li>
<li>设置74LS138的A2，A1，A0依次为1，0，1</li>
<li>输入不同的3位密码，检查74LS151的输出是否正确。</li>
<li>检查74LS04的反相输出是否正确。</li>
<li>检查灯L的状态，验证密码锁功能是否正确。</li>
</ol>
<h3 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h3><p>通过组合74LS138、74LS151和74LS04，我们设计了一个密码锁系统。用户输入的3位二进制密码通过数据选择器和译码器进行比较，若一致则输出高电平控制灯亮，否则输出低电平灯灭。这个设计保持了简单性，并使用了三个芯片，符合实验箱的限制，同时实现了基本的密码锁功能。</p>
]]></content>
      <categories>
        <category>作品</category>
      </categories>
      <tags>
        <tag>设计</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
</search>
